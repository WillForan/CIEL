DISCLAIMER: this is an EARLY DRAFT, but it is usable.

CIEL Is an Extended Lisp

* What is this ?

  CIEL is a collection of useful Quicklisp libraries.

  It's Common Lisp, batteries included.

  Questions, doubts? See the [[file:FAQ.org][FAQ]].


* TODOs

- settle on libraries that help newcomers
- automate the documentation
- distribute (Quicklisp, Qlot, Quicklisp distribution, Ultralisp,
  Ultralisp distribution (upcoming)…)
- ship a core image and a binary
- optionnal: create a tool that, given a CIEL code base, explains what
  packages to import in order to switch to "plain CL".

How to procede ?

This is an experiment. I'd be happy to give push rights to more
maintainers. We will send pull requests, discuss, and in case we don't
find a consensus for what should be on by default, we can create other
packages.

Rules

- don't install libraries that need a Slime helper to work in the REPL (cl-annot).
- reader syntax changes may not be enabled by default.

* Install

** With Quicklisp

You need a Lisp implementation and Quicklisp installed.

CIEL is not yet on Quicklisp (but it is on [[https://ultralisp.org][Ultralisp]]), so clone this
repository and load the .asd (with =load= or =C-c C-k= in
Slime).

: git clone https://github.com/ciel-lang/CIEL ~/quicklisp/local-projects/CIEL

Then, quickload it:

#+BEGIN_SRC lisp
(ql:quickload "ciel")
#+end_src

and enter the =ciel-user= package, instead of the default
=common-lisp-user= (or =cl-user=):

#+BEGIN_SRC lisp
(in-package :ciel-user)
#+end_src

** With a core image

You need a Lisp implementation, but you don't need Quicklisp.

Build a /core image/ for your lisp with all CIEL's dependencies:

: sbcl --load build-image.lisp

and use it:

: sbcl --core ciel --eval '(in-package :ciel-user)'

TODO: we will distribute ready-to-use core images.

** With a binary. Use CIEL's own REPL.

   You don't need anything, just download the CIEL executable and run
   its REPL.

   TODO: build it on CI for different platforms.

   To build it, clone this repository and run =make build=.

   Start it with =./ciel-repl=.

   You are dropped into a custom Lisp REPL, freely based on [[https://github.com/hellerve/sbcli][sbcli]].

   This REPL is more user friendly than the default SBCL one. It
   handles errors gracefully, it is not too verbose and it has readline
   capabilities, including multiline input and reset.

   # todo: symbol completion is broken?

* Libraries
** Data structures
*** access, generic and nested access to all common datastructures

https://github.com/AccelerationNet/access/

It's always

#+BEGIN_SRC lisp
(access my-structure :elt)
#+end_src

*** hash-table utilities

We import functions from Serapeum.
https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md#hash-tables

*** sequences

https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md#sequences

*** str, a string manipulation library

    Available with the =str= prefix.

    https://github.com/vindarel/cl-str/

** Data formats
*** JSON
*** CSV

    You have [[https://github.com/AccelerationNet/cl-csv][cl-csv]], under its =cl-csv= package name and the =csv=
    local nickname.

    #+BEGIN_SRC lisp
      ;; read a file into a list of lists
      (cl-csv:read-csv #P"file.csv")
      => (("1" "2" "3") ("4" "5" "6"))

      ;; read csv from a string (streams also supported)
      (cl-csv:read-csv "1,2,3
      4,5,6")
      => (("1" "2" "3") ("4" "5" "6"))

      ;; read a file that's tab delimited
      (cl-csv:read-csv #P"file.tab" :separator #\Tab)

      ;; loop over a CSV for effect
      (let ((sum 0))
        (cl-csv:do-csv (row #P"file.csv")
          (incf sum (parse-integer (nth 0 row))))
        sum)
    #+end_src

See also:

- [[https://github.com/defunkydrummer/auto-text][auto-text]], automatic detection for text files (encoding, end of
  line, column width, csv delimiter etc). [[https://github.com/t-sin/inquisitor][inquisitor]] for detection of
  asian and far eastern languages.
- [[https://github.com/sharplispers/clawk][CLAWK]], an AWK implementation embedded into Common Lisp, to parse
  files line-by-line.

** Databases

Mito and SxQL

https://lispcookbook.github.io/cl-cookbook/databases.html

** Pattern matching

Use Trivia, also available with the =match= local nickname.

** Numbers
*** parse-float
https://github.com/soemraws/parse-float

*** parse-number
https://github.com/sharplispers/parse-number

*** Parsing numbers, floats, decimals
**** cl-decimals: parse and format decimal numbers

 https://github.com/tlikonen/cl-decimals

 The  main  interface  are  the  functions  =parse-decimal-number=  and
 =format-decimal-number=. The former is for parsing strings for decimal
 numbers and the latter for pretty-printing them as strings.

 Reading:

 #+BEGIN_SRC lisp
 DECIMALS> (parse-decimal-number "0.24")
 6/25


 DECIMALS> (parse-decimal-number "−12,345"
                                 :decimal-separator #\,
                                 :negative-sign #\−)
 -2469/200
 #+end_src

 Parsing:

 #+BEGIN_SRC lisp
 DECIMALS> (format-decimal-number -100/6 :round-magnitude -3)
 "-16.667"
 ("-" "16" "." "667")

 DECIMALS> (loop for e from -5 upto 5
                 do (print (format-decimal-number
                            (expt 10 e) :round-magnitude -5
                            :decimal-separator ","
                            :integer-minimum-width 7
                            :integer-group-separator " "
                            :fractional-minimum-width 7
                            :fractional-group-separator " ")))

 "      0,000 01"
 "      0,000 1 "
 "      0,001   "
 "      0,01    "
 "      0,1     "
 "      1       "
 "     10       "
 "    100       "
 "  1 000       "
 " 10 000       "
 "100 000       "
 NIL
 #+end_src

** Regular expressions

Use =ppcre=.

** Threads, monitoring, scheduling

Bordeaux-Threads (=bt= prefix)

Lparallel

Moira: https://github.com/ruricolist/moira (monitor and restart
background threads)

http://quickdocs.org/trivial-monitored-thread/

#+begin_quote
Trivial Monitored Thread offers a very simple (aka trivial) way of
spawning threads and being informed when one any of them crash and
die.
#+end_quote

cl-cron http://quickdocs.org/cl-cron/api

** Web

Imported:

- Hunchentoot
- Easy-routes
- Djula
- Spinneret
- Quri
- Lquery

https://lispcookbook.github.io/cl-cookbook/web.html

** Syntax extensions
*** Pythonic triple quotes docstring

https://github.com/smithzvk/pythonic-string-reader

We can use triple quotes for docstrings, and double quotes within them.

#+BEGIN_SRC lisp
(defun foo ()
  """foo "bar"."""
  t)
#+end_src
*** Lambda shortcuts

You have to enable cl-punch's syntax yourself.

 https://github.com/windymelt/cl-punch/ - Scala-like anonymous lambda literal.

: (cl-punch:enable-punch-syntax)

#+BEGIN_SRC lisp
;; ^() is converted into (lambda ...) .
;; Each underscore is converted into a lambda argument.

(mapcar ^(* 2 _) '(1 2 3 4 5))
;; => '(2 4 6 8 10)

;; One underscore corresponds one argument.

(^(* _ _) 2 3)
;; => 6

;; <_ reuses last argument.

(mapcar ^(if (oddp _) (* 2 <_) <_) '(1 2 3 4 5))
;; => '(2 2 6 4 10)

;; _! corresponds one argument but it is brought to top of the argument list.
;; It can be useful when you want to change argument order.

(^(cons _ _!) :a :b)
;; => (:b . :a)

(^(list _! _! _!) 1 2 3)
;; => '(3 2 1)
#+end_src

** Development
*** Testing (Fiveam)

    The [[https://common-lisp.net/project/fiveam/docs/][FiveAM]] test framework is available for use.

    Below we create a package to contain our tests and we define the
    most simple one:

    #+BEGIN_SRC lisp
(defpackage ciel-5am
  (:use :cl :5am))

(in-package :ciel-5am)

(test test-one
  (is (= 1 1)))
    #+end_src

    Run the test with:

: (run! 'test-one)

You'll see an output with explanations:

#+begin_export ascii
(run! 'test-one)

Running test TEST-ONE .
 Did 1 check.
    Pass: 1 (100%)
    Skip: 0 ( 0%)
    Fail: 0 ( 0%)

T
NIL
NIL
#+end_export

However if the test fails you will see explanations:

#+begin_export ascii
> (run! 'test-one)

Running test TEST-ONE .f
 Did 2 checks.
    Pass: 1 (50%)
    Skip: 0 ( 0%)
    Fail: 1 (50%)

 Failure Details:
 --------------------------------
 TEST-ONE []:

1

 evaluated to

1

 which is not

=

 to

2


 --------------------------------

NIL
(#<IT.BESE.FIVEAM::TEST-FAILURE {1007307ED3}>)
NIL
#+end_export

Use =run= to not print explanations.

You can use =(!)= to re-run the last run test.

You can ask 5am to open the interactive debugger on an error:

: (setf *debug-on-error* t)

***  Logging (log4cl)

https://github.com/sharplispers/log4cl/

: (log:info …)

*** repl-utilities (readme, summary,…)

[[http://quickdocs.org/repl-utilities/][repl-utilities]]:

: (repl-utilities:readme repl-utilities)

*** printv

    https://github.com/danlentz/printv

    #+BEGIN_SRC lisp
 (:printv
  (defvar *y*)
  (defparameter *x* 2)
  (setf *y* (sqrt *x*))
  (setf *y* (/ 1 *y*)))

;; This produces the following text to PRINTV's output stream, and still results in the same returned value: 0.70710677.

;;;   (DEFVAR *Y*) => *Y*
;;;   (DEFPARAMETER *X* 2) => *X*
;;;   (SETF *Y* (SQRT *X*)) => 1.4142135
;;;   (SETF *Y* (/ 1 *Y*)) => 0.70710677

    #+end_src

*** Getting a function's arguments list (trivial-arguments)

 https://github.com/Shinmera/trivial-arguments

 #+BEGIN_SRC emacs-lisp
 (defun foo (a b c &optional d) nil)
 (arglist #'foo)
 ;; (a b c &optional d)
 #+END_SRC

** generic-cl

 https://github.com/alex-gutev/generic-cl/

 todo:

 : generic-ciel

 Example:

 #+BEGIN_SRC emacs-lisp
 ;; with a struct or class "point":
 (defmethod equalp ((p1 point) (p2 point))
    (…))
 #+END_SRC


* Final words

That was your life in CL:

#+html: <p align="center"><img src="before.jpeg" /></p>

and now:

#+html: <p align="center"><img src="after-plus.jpeg" /></p>
